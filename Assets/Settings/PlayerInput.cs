//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Controlling"",
            ""id"": ""b3d13785-d0bd-441e-9912-24d545aef103"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b703cec4-3434-453c-86bb-a6307f9fcae1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveMultiplier"",
                    ""type"": ""Value"",
                    ""id"": ""2aa439d1-b127-43ee-bb89-2e151c5ba51f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""7a83fdad-0f05-433c-bec7-3708b3ddbd00"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dffc56eb-534e-4c77-90cd-8dd0c9def7cb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardInput"",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0fba50af-0819-4adf-b5d8-7fb901043387"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b0a6125-32d2-41a3-96fe-b7157f73d5d5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardInput"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dc332d11-2990-447f-9245-96c7099cacf0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardInput"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd28fea7-4178-4dfb-83de-baf931d976d0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardInput"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3a093bae-bced-48d5-95b8-c1678693ebf4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardInput"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d8ace4a5-5e8a-48c6-b25c-d9a4554e6043"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMultiplier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardInput"",
            ""bindingGroup"": ""KeyboardInput"",
            ""devices"": []
        }
    ]
}");
        // Controlling
        m_Controlling = asset.FindActionMap("Controlling", throwIfNotFound: true);
        m_Controlling_Move = m_Controlling.FindAction("Move", throwIfNotFound: true);
        m_Controlling_MoveMultiplier = m_Controlling.FindAction("MoveMultiplier", throwIfNotFound: true);
        m_Controlling_Esc = m_Controlling.FindAction("Esc", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controlling
    private readonly InputActionMap m_Controlling;
    private IControllingActions m_ControllingActionsCallbackInterface;
    private readonly InputAction m_Controlling_Move;
    private readonly InputAction m_Controlling_MoveMultiplier;
    private readonly InputAction m_Controlling_Esc;
    public struct ControllingActions
    {
        private @PlayerInput m_Wrapper;
        public ControllingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Controlling_Move;
        public InputAction @MoveMultiplier => m_Wrapper.m_Controlling_MoveMultiplier;
        public InputAction @Esc => m_Wrapper.m_Controlling_Esc;
        public InputActionMap Get() { return m_Wrapper.m_Controlling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllingActions set) { return set.Get(); }
        public void SetCallbacks(IControllingActions instance)
        {
            if (m_Wrapper.m_ControllingActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_ControllingActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ControllingActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ControllingActionsCallbackInterface.OnMove;
                @MoveMultiplier.started -= m_Wrapper.m_ControllingActionsCallbackInterface.OnMoveMultiplier;
                @MoveMultiplier.performed -= m_Wrapper.m_ControllingActionsCallbackInterface.OnMoveMultiplier;
                @MoveMultiplier.canceled -= m_Wrapper.m_ControllingActionsCallbackInterface.OnMoveMultiplier;
                @Esc.started -= m_Wrapper.m_ControllingActionsCallbackInterface.OnEsc;
                @Esc.performed -= m_Wrapper.m_ControllingActionsCallbackInterface.OnEsc;
                @Esc.canceled -= m_Wrapper.m_ControllingActionsCallbackInterface.OnEsc;
            }
            m_Wrapper.m_ControllingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MoveMultiplier.started += instance.OnMoveMultiplier;
                @MoveMultiplier.performed += instance.OnMoveMultiplier;
                @MoveMultiplier.canceled += instance.OnMoveMultiplier;
                @Esc.started += instance.OnEsc;
                @Esc.performed += instance.OnEsc;
                @Esc.canceled += instance.OnEsc;
            }
        }
    }
    public ControllingActions @Controlling => new ControllingActions(this);
    private int m_KeyboardInputSchemeIndex = -1;
    public InputControlScheme KeyboardInputScheme
    {
        get
        {
            if (m_KeyboardInputSchemeIndex == -1) m_KeyboardInputSchemeIndex = asset.FindControlSchemeIndex("KeyboardInput");
            return asset.controlSchemes[m_KeyboardInputSchemeIndex];
        }
    }
    public interface IControllingActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMoveMultiplier(InputAction.CallbackContext context);
        void OnEsc(InputAction.CallbackContext context);
    }
}
